generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid         String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  refreshToken String?   @map("refresh_token")
  tokenExpiry  DateTime? @map("token_expiry")
  createdAt    DateTime  @default(now()) @map("create_at")
  updatedAt    DateTime  @updatedAt @map("update_at")
  userProfiles UserProfile[]

  @@map("user")
}

model Profile {
  id                     Int                     @id @default(autoincrement())
  name                   String
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  profileFunctionalities ProfileFunctionality[]
  userProfiles           UserProfile[]

  @@map("profile")
}

model Functionality {
  id                     Int                     @id @default(autoincrement())
  name                   String
  description            String
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  profileFunctionalities ProfileFunctionality[]

  @@map("functionality")
}

model ProfileFunctionality {
  id              Int           @id @default(autoincrement())
  profileId       Int           @map("profile_id")
  functionalityId Int           @map("functionality_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  profile         Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  functionality   Functionality @relation(fields: [functionalityId], references: [id], onDelete: Cascade)

  @@unique([profileId, functionalityId])
  @@map("profile_functionality")
}

model UserProfile {
  id              Int           @id @default(autoincrement())
  userUuid        String        @map("user_uuid")
  profileId       Int           @map("profile_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user            User          @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
  profile         Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([userUuid, profileId])
  @@map("user_profile")
}